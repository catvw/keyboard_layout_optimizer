metrics:
  # Each finger's load shall be relative to the specified weights
  finger_balance:
    enabled: true
    weight: 50.0
    normalization:
      type: fixed
      value: 1.0
    params:
      # Intended factors for finger load. Thumb values are ignored.
      intended_loads:
        [Left, Pinky]: 1.0
        [Left, Ring]: 1.6
        [Left, Middle]: 2.0
        [Left, Index]: 2.0
        [Left, Thumb]: 2.0
        [Right, Thumb]: 2.0
        [Right, Index]: 2.0
        [Right, Middle]: 2.0
        [Right, Ring]: 1.6
        [Right, Pinky]: 1.0

  # Each hand's load all be close to 50%
  hand_disbalance:
    enabled: true
    weight: 40.0
    normalization:
      type: fixed
      value: 1.0
    params:
      null: null

  # Each keystroke incurs a cost (defined in the keyboard's layout config)
  key_costs:
    enabled: true
    weight: 20.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      null: null

  modifier_usage:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      hold_cost: 1.0
      one_shot_cost: 0.0
      long_press_cost: 1.0

  # bigram metrics

  # For specific intra-cluster motions (like center-south rolls), motions can
  # feel much better than a typical finger repeat.
  cluster_rolls:
    enabled: true
    weight: 780.0
    normalization:
      type: weight_found
      value: 1.0

    params:
      # Default cost of a cluster roll. Perhaps best handled by finger_repeats.
      default_cost: 0.0

      # Format:
      #   from:
      #     to: cost
      #     to: cost
      #     etc.
      costs:
        Center:
          South: -10.0
          North: 1.0
          In: 5.0
          Out: 5.0
        North:
          South: 21.0
          In: 11.0
          Out: 19.0
          Center: 5.0
        South:
          North: 21.0
          In: 19.0
          Out: 21.0
          Center: 9.0
        In:
          Out: 28.0
          North: 17.0
          South: 17.0
          Center: 11.0
        Out:
          In: 28.0
          North: 17.0
          South: 17.0
          Center: 11.0
        Pad:
          Up: -7.0

  # If both keys corresponding to a bigram belong to the same finger, a cost is counted.
  # The cost can be weighted by the individual keys and if they are performed by stretching
  # or curling the finger. Also accounted for is whether there is lateral or in-line movement.
  finger_repeats:
    enabled: true
    weight: 780.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # Finger-individual weights to be multiplied with the cost
      finger_factors:
        Thumb: 1.2
        Index: 0.8
        Middle: 1.0
        Ring: 1.1
        Pinky: 1.2
      # Factor applied if the repeat consists of a movement
      # in line of the finger "outwards", i.e. by stretching the finger
      stretch_factor: 1.4
      # Factor applied if the repeat consists of a movement
      # in line of the finger "inwards", i.e. by curling the finger
      curl_factor: 1.1
      # Factor applied if the repeat consists of a lateral movement
      lateral_factor: 2
      # Cost to apply if the finger repeat happens on the same key
      same_key_offset: 0.25

  # Depending on which fingers of the same hand are used to hit the keys of a bigram,
  # how many rows were crossed and in which direction the movement occurs, costs are
  # counted.
  movement_pattern:
    enabled: true
    weight: 100.0
    normalization:
      type: weight_found
      value: 1.0
    params:
      # from: Finger for first symbol of the bigram
      # to: Finger for second symbol of the bigram
      # cost: Cost to count for such a movement
      finger_switch_factor:
        - { from: [Left, Pinky],   to: [Left, Ring],    cost: 4 }
        - { from: [Left, Pinky],   to: [Left, Middle],  cost: 2 }

        - { from: [Left, Ring],    to: [Left, Pinky],   cost: 6 }
        - { from: [Left, Ring],    to: [Left, Middle],  cost: 2 }
        - { from: [Left, Ring],    to: [Left, Index], cost: 0.1 }

        - { from: [Left, Middle],  to: [Left, Pinky],   cost: 3 }
        - { from: [Left, Middle],  to: [Left, Ring],    cost: 5 }
        - { from: [Left, Middle],  to: [Left, Index], cost: 0.6 }

        - { from: [Left, Index], to: [Left, Pinky],   cost: 0.1 }
        - { from: [Left, Index], to: [Left, Ring],    cost: 0.3 }
        - { from: [Left, Index], to: [Left, Middle],  cost: 0.9 }

        - { from: [Right, Pinky],   to: [Right, Ring],    cost: 4 }
        - { from: [Right, Pinky],   to: [Right, Middle],  cost: 2 }

        - { from: [Right, Ring],    to: [Right, Pinky],   cost: 6 }
        - { from: [Right, Ring],    to: [Right, Middle],  cost: 2 }
        - { from: [Right, Ring],    to: [Right, Index], cost: 0.1 }

        - { from: [Right, Middle],  to: [Right, Pinky],   cost: 3 }
        - { from: [Right, Middle],  to: [Right, Ring],    cost: 5 }
        - { from: [Right, Middle],  to: [Right, Index], cost: 0.6 }

        - { from: [Right, Index], to: [Right, Pinky],   cost: 0.1 }
        - { from: [Right, Index], to: [Right, Ring],    cost: 0.3 }
        - { from: [Right, Index], to: [Right, Middle],  cost: 0.9 }

      # Finger lengths
      finger_lengths:
        Left:
          Pinky: 1
          Ring: 2
          Middle: 3
          Index: 2
        Right:
          Pinky: 1
          Ring: 2
          Middle: 3
          Index: 2

      # If the movement is directed downwards from a short towards a long
      # or upwards from a long towards a short finger,
      # the cost is multiplied by this factor
      short_down_to_long_or_long_up_to_short_factor: 2.0

      # The cost is multiplied by the same_row_offset plus number of crossed rows.
      # If same_row_offset is zero, movement patterns on the same row have zero cost.
      same_row_offset: 0.1

      # If the movement involves unbalancing keys (horizontally or vertically), the corresponding
      # unbalancing values are weighted with this factor and multiplied to the result.
      unbalancing_factor: 0.5

      # If a movement involves a lateral stretch (the keys are more columns apart than the fingers),
      # (one plus) this factor is multiplied to the cost with the number of columns to stretch.
      lateral_stretch_factor: 0.0

ngrams:
  # Increase the weight of bigrams that have both an absolute weight and relative weight exceed
  # specified thresholds.
  increase_common_ngrams:
    enabled: false
    # Bigrams with a relative weight exceeding this threshold are considered
    critical_fraction: 0.001
    # The weight for bigrams exceeding both thresholds is multiplied by this factor
    factor: 2.0
    # Bigrams with an absolute weight exceeding this threshold are considered
    total_weight_threshold: 20.0

ngram_mapper:
  # Exclude ngrams that contain a line break, followed by a non-line-break character.
  # This encodes a mental pause which usually comes after hitting the "Enter" key, before
  # continuing to write.
  exclude_line_breaks: true

  # Split symbols belonging to higher layers of the layout into combinations involving modifiers
  # required to activate the layer
  split_modifiers:
    enabled: true
    # Multiply the ngram's weight with this factor whenever the resulting ngram involves two
    # modifiers that are required for the same symbol
    same_key_mod_factor: 0.03125
